$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 C clk $end
  $scope module Top $end
   $var wire 1 C clk $end
   $var wire 16 # inst [15:0] $end
   $var wire 1 D load $end
   $var wire 8 E ip_data [7:0] $end
   $var wire 8 $ imem_addr [7:0] $end
   $var wire 17 F dmem_ctrl [16:0] $end
   $var wire 8 % dmem_out [7:0] $end
   $scope module br $end
    $var wire 16 # inst [15:0] $end
    $var wire 1 C clk $end
    $var wire 8 % dmem_out [7:0] $end
    $var wire 17 F dmem_ctrl [16:0] $end
    $var wire 4 & opcode [3:0] $end
    $var wire 12 ' operands [11:0] $end
    $var wire 5 ( ctrl_sig [4:0] $end
    $scope module cp $end
     $var wire 4 & opcode [3:0] $end
     $var wire 5 ( ctrl_sig [4:0] $end
    $upscope $end
    $scope module dp $end
     $var wire 1 C clk $end
     $var wire 12 ' operands [11:0] $end
     $var wire 5 ( ctrl_sig [4:0] $end
     $var wire 8 % dmem_out [7:0] $end
     $var wire 17 F dmem_ctrl [16:0] $end
     $var wire 1 ) wr_en $end
     $var wire 4 * dst_id [3:0] $end
     $var wire 4 + src1_id [3:0] $end
     $var wire 4 , src2_id [3:0] $end
     $var wire 8 - dst_in [7:0] $end
     $var wire 8 . src1_out [7:0] $end
     $var wire 8 / src2_out [7:0] $end
     $var wire 8 0 imm [7:0] $end
     $var wire 8 . a [7:0] $end
     $var wire 8 / b [7:0] $end
     $var wire 4 , n [3:0] $end
     $var wire 2 1 cmd [1:0] $end
     $var wire 8 2 x [7:0] $end
     $scope module alu $end
      $var wire 32 G D [31:0] $end
      $var wire 8 . a [7:0] $end
      $var wire 8 / b [7:0] $end
      $var wire 4 , n [3:0] $end
      $var wire 2 1 cmd [1:0] $end
      $var wire 8 2 x [7:0] $end
     $upscope $end
     $scope module rf $end
      $var wire 32 G D [31:0] $end
      $var wire 32 H I [31:0] $end
      $var wire 1 C clk $end
      $var wire 1 ) wr_en $end
      $var wire 4 * dst_id [3:0] $end
      $var wire 4 + src1_id [3:0] $end
      $var wire 4 , src2_id [3:0] $end
      $var wire 8 - dst_in [7:0] $end
      $var wire 8 . src1_out [7:0] $end
      $var wire 8 / src2_out [7:0] $end
      $var wire 8 3 regarray[0] [7:0] $end
      $var wire 8 4 regarray[1] [7:0] $end
      $var wire 8 5 regarray[2] [7:0] $end
      $var wire 8 6 regarray[3] [7:0] $end
      $var wire 8 7 regarray[4] [7:0] $end
      $var wire 8 8 regarray[5] [7:0] $end
      $var wire 8 9 regarray[6] [7:0] $end
      $var wire 8 : regarray[7] [7:0] $end
      $var wire 8 ; regarray[8] [7:0] $end
      $var wire 8 < regarray[9] [7:0] $end
      $var wire 8 = regarray[10] [7:0] $end
      $var wire 8 > regarray[11] [7:0] $end
      $var wire 8 ? regarray[12] [7:0] $end
      $var wire 8 @ regarray[13] [7:0] $end
      $var wire 8 A regarray[14] [7:0] $end
      $var wire 8 B regarray[15] [7:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module dmem $end
    $var wire 32 G D [31:0] $end
    $var wire 32 G A [31:0] $end
    $var wire 1 C clk $end
    $var wire 17 F dmem_ctrl [16:0] $end
    $var wire 8 % data_out [7:0] $end
   $upscope $end
   $scope module imem $end
    $var wire 32 I D [31:0] $end
    $var wire 32 G A [31:0] $end
    $var wire 1 C clk $end
    $var wire 8 $ addr [7:0] $end
    $var wire 16 # data_out [15:0] $end
   $upscope $end
   $scope module ip $end
    $var wire 32 G N [31:0] $end
    $var wire 1 C clk $end
    $var wire 1 D l $end
    $var wire 8 E d [7:0] $end
    $var wire 8 $ q [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b1010000100001010 #
b00000000 $
b00000000 %
b1010 &
b000100001010 '
b11000 (
1)
b0001 *
b0000 +
b1010 ,
b00001010 -
b00000000 .
b00000000 /
b00001010 0
b00 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000 =
b00000000 >
b00000000 ?
b00000000 @
b00000000 A
b00000000 B
1C
0D
b00000000 E
b00000000000000000 F
b00000000000000000000000000001000 G
b00000000000000000000000000000100 H
b00000000000000000000000000010000 I
#1
0C
#2
b1010001000000011 #
b00000001 $
b001000000011 '
b0010 *
b0011 ,
b00000011 -
b00000011 0
b00001010 4
1C
#3
0C
#4
b0000001100000001 #
b00000010 $
b0000 &
b001100000001 '
b01000 (
b0011 *
b0001 ,
b00001010 -
b00001010 /
b00000001 0
b00001010 2
b00000011 5
1C
#5
0C
#6
b0000001100110010 #
b00000011 $
b001100110010 '
b0011 +
b0010 ,
b00001101 -
b00001010 .
b00000011 /
b00110010 0
b00001101 2
b00001010 6
1C
#7
0C
#8
b1100000100000000 #
b00000100 $
b1100 &
b000100000000 '
b00001 (
0)
b0001 *
b0000 +
b0000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 2
b00001101 6
1C
#9
0C
#10
b1100001000000001 #
b00000101 $
b001000000001 '
b0010 *
b0001 ,
b00001010 -
b00001010 /
b00000001 0
b00001010 2
1C
#11
0C
#12
b1100001100000010 #
b00000110 $
b001100000010 '
b0011 *
b0010 ,
b00000011 -
b00000011 /
b00000010 0
b00000011 2
1C
#13
0C
#14
b0000000000000000 #
b00000111 $
b0000 &
b000000000000 '
b01000 (
1)
b0000 *
b0000 ,
b00000000 -
b00000000 /
b00000000 0
b00000000 2
1C
#15
0C
#16
b00001000 $
1C
#17
0C
#18
b00001001 $
1C
#19
0C
#20
b00001010 $
1C
#21
0C
#22
b00001011 $
1C
#23
0C
#24
b00001100 $
1C
#25
0C
#26
b00001101 $
1C
#27
0C
#28
b00001110 $
1C
#29
0C
